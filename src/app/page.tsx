'use client';

import React, { useState, useMemo } from 'react';
import { SidebarProvider, Sidebar, SidebarInset, SidebarHeader, SidebarContent, SidebarFooter, SidebarTrigger } from '@/components/ui/sidebar';
import { Button } from '@/components/ui/button';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import FileImporter from '@/components/file-importer';
import Dashboard from '@/components/dashboard';
import { alignData, parseCSV } from '@/lib/data-utils';
import { getCorrelationAnalysis } from '@/lib/actions';
import type { AnalysisResult, DataSet } from '@/types';
import { AlertTriangle, BrainCircuit, Download, Lightbulb, TestTube2, Wind } from 'lucide-react';
import { useToast } from "@/hooks/use-toast"
import Image from 'next/image';

export default function SymptomInsightsPage() {
  const [symptomData, setSymptomData] = useState<DataSet | null>(null);
  const [envData, setEnvData] = useState<DataSet | null>(null);
  const [alignedData, setAlignedData] = useState<DataSet | null>(null);
  const [analysisResult, setAnalysisResult] = useState<AnalysisResult | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const { toast } = useToast();

  const symptomFileName = useMemo(() => symptomData?.fileName || 'Symptom Data', [symptomData]);
  const envFileName = useMemo(() => envData?.fileName || 'Environmental Factors', [envData]);

  const handleDataImport = (setter: React.Dispatch<React.SetStateAction<DataSet | null>>, file: File) => {
    const reader = new FileReader();
    reader.onload = (e) => {
      try {
        const text = e.target?.result as string;
        const parsedData = parseCSV(text);
        if (parsedData.length === 0) {
            throw new Error("CSV file is empty or invalid.")
        }
        (parsedData as any).fileName = file.name;
        setter(parsedData);
        setError(null);
        setAnalysisResult(null); // Reset analysis on new data
      } catch (err) {
        const message = err instanceof Error ? err.message : 'An unknown error occurred during file parsing.';
        setError(`Error parsing ${file.name}: ${message}`);
        toast({
          variant: "destructive",
          title: "File Parsing Error",
          description: `Could not parse ${file.name}. Please ensure it is a valid CSV file.`,
        })
      }
    };
    reader.onerror = () => {
        setError(`Error reading file ${file.name}.`);
        toast({
          variant: "destructive",
          title: "File Reading Error",
          description: `There was a problem reading ${file.name}.`,
        })
    };
    reader.readAsText(file);
  };
  
  const handleAnalyze = async () => {
    if (!symptomData || !envData) {
      setError('Please upload both symptom and environmental data files.');
      return;
    }

    setIsLoading(true);
    setError(null);
    setAnalysisResult(null);

    try {
      const aligned = alignData(symptomData, envData);
      if(aligned.length === 0) {
        throw new Error("No matching timestamps found between the two datasets. Please check your data.");
      }
      setAlignedData(aligned);

      const result = await getCorrelationAnalysis(aligned, symptomData, envData);
      setAnalysisResult(result);

    } catch (err) {
      const message = err instanceof Error ? err.message : 'An unknown error occurred during analysis.';
      setError(message);
      toast({
        variant: "destructive",
        title: "Analysis Failed",
        description: message,
      })
    } finally {
      setIsLoading(false);
    }
  };

  const handleExport = () => {
    if (!analysisResult || !alignedData) {
        toast({
            variant: "destructive",
            title: "Export Failed",
            description: "No analysis results to export.",
        });
        return;
    }
    const report = {
        title: "Symptom Insights Correlation Report",
        generatedAt: new Date().toISOString(),
        analysis: analysisResult,
        alignedData: alignedData,
        sources: {
            symptomDataFile: symptomData?.fileName,
            environmentalDataFile: envData?.fileName,
        },
        attributions: "Generated by Symptom Insights"
    };

    const jsonString = JSON.stringify(report, null, 2);
    const blob = new Blob([jsonString], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `symptom-insights-report-${new Date().getTime()}.json`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  const canAnalyze = symptomData !== null && envData !== null;

  return (
    <SidebarProvider>
      <Sidebar side="left" variant="sidebar" collapsible="icon">
        <SidebarHeader>
            <div className="flex items-center gap-2 p-2">
                <TestTube2 className="w-8 h-8 text-primary" />
                <h1 className="text-xl font-semibold text-foreground group-data-[collapsible=icon]:hidden">
                    Symptom Insights
                </h1>
            </div>
        </SidebarHeader>
        <SidebarContent>
            <FileImporter
                symptomFileName={symptomFileName}
                envFileName={envFileName}
                onSymptomFileSelect={(file) => handleDataImport(setSymptomData, file)}
                onEnvFileSelect={(file) => handleDataImport(setEnvData, file)}
            />
        </SidebarContent>
        <SidebarFooter className="items-center">
            <div className="flex flex-col w-full gap-2 p-2">
                <Button onClick={handleAnalyze} disabled={!canAnalyze || isLoading}>
                    <BrainCircuit className="mr-2 h-4 w-4" />
                    {isLoading ? 'Analyzing...' : 'Run Analysis'}
                </Button>
                <Button onClick={handleExport} variant="outline" disabled={!analysisResult}>
                    <Download className="mr-2 h-4 w-4" />
                    Export Report
                </Button>
            </div>
        </SidebarFooter>
      </Sidebar>
      <SidebarInset>
        <div className="flex items-center justify-between p-4 bg-card md:bg-transparent border-b">
            <div className="flex items-center gap-2">
                <SidebarTrigger className="md:hidden" />
                <h2 className="text-lg font-semibold">Correlation Dashboard</h2>
            </div>
        </div>

        <main className="flex-1 p-4 md:p-6">
          {error && (
            <Alert variant="destructive" className="mb-4">
              <AlertTriangle className="h-4 w-4" />
              <AlertTitle>Error</AlertTitle>
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}

          {!analysisResult && !isLoading && (
             <div className="flex flex-col items-center justify-center h-full text-center text-muted-foreground rounded-lg border-2 border-dashed p-8">
                <Image src="https://picsum.photos/600/400" data-ai-hint="data analysis" alt="Data analysis illustration" width={600} height={400} className="max-w-xs md:max-w-sm rounded-lg mb-8 opacity-70" />
                <h3 className="text-2xl font-bold text-foreground mb-2">Welcome to Symptom Insights</h3>
                <p className="max-w-md mb-6">Discover potential links between your well-being and the world around you. This tool is private, secure, and runs entirely in your browser.</p>
                <div className="flex flex-wrap justify-center gap-4 text-left max-w-2xl">
                    <div className="flex items-start gap-3 p-4 rounded-lg bg-background/50">
                        <TestTube2 className="h-6 w-6 text-primary mt-1 shrink-0"/>
                        <div>
                            <h4 className="font-semibold text-foreground">1. Upload Symptom Data</h4>
                            <p className="text-sm">Provide a CSV with timestamps and symptom scores.</p>
                        </div>
                    </div>
                    <div className="flex items-start gap-3 p-4 rounded-lg bg-background/50">
                        <Wind className="h-6 w-6 text-primary mt-1 shrink-0"/>
                        <div>
                            <h4 className="font-semibold text-foreground">2. Upload Factor Data</h4>
                            <p className="text-sm">Add a CSV with environmental data for the same period.</p>
                        </div>
                    </div>
                     <div className="flex items-start gap-3 p-4 rounded-lg bg-background/50">
                        <BrainCircuit className="h-6 w-6 text-primary mt-1 shrink-0"/>
                        <div>
                            <h4 className="font-semibold text-foreground">3. Analyze & Explore</h4>
                            <p className="text-sm">Click 'Run Analysis' to generate your private report.</p>
                        </div>
                    </div>
                </div>
            </div>
          )}

          {isLoading && (
            <div className="flex items-center justify-center h-full flex-col gap-4">
                <Lightbulb className="w-16 h-16 animate-pulse text-accent"/>
                <p className="text-lg font-semibold text-muted-foreground">Generating insights... this may take a moment.</p>
            </div>
          )}
          
          {analysisResult && (
            <Dashboard result={analysisResult} alignedData={alignedData!} />
          )}
        </main>
      </SidebarInset>
    </SidebarProvider>
  );
}
